 
XML解析方式分为两种：dom和sax
dom：(Document Object Model, 即文档对象模型) 是 W3C 组织推荐的处理 XML 的一种标准方式。
sax： (Simple API for XML) 不是官方标准，但它是 XML 社区事实上的标准，几乎所有的 XML 解析器都支持它。


5 什么是xml？为什么使用xml？常见应用？
   1)允许用户按照w3c组件的规定去定义无数个自定义标签
   2)需要使用XML技述通知计算机程序去处理关系数据
   3)保存XML文件时，一定要确保XML文件保存的编码和encoding声明的编码方式一致或兼容
   4)XML可以用来描述关系结构的数据，还可以作配置文件，以描述程序模块之间的关系。
   在一个软件系统中，为提高系统的灵活性，它所 启动的模块 通常由其配置文件决定。
   当作一个小型的数据库或数据载体


*6 xml文件的语法
   1)文档声明
<?xml version="1.0" 指明XML文件的版本号，XML解析器就会采用对应的版本进行解析
      encoding="UTF-8" 指明XML文件中的中文采用UTF-8编码，在IDE工具中，指明该文件的保存编码方式?
              standalone="yes或no" 指明XML文件需要初其它文件DTD约束的话，就是no，如果单独的XML文件，就是yes>
        各浏览器中的XML解析器 只对XML文件的语法检测 ，IE不检查standalone属性


   2)元素
1)通常元素都有开始和结束标签，但也可以使用空标签，即<a></a>=<a/>
2）XML中标签嵌入顺序必须一致，且字符大小写不一致
3）程序会将标签内的 空白字符 当作有效字符对待
由于在XML中，空格和换行都作为原始内容被处理，所以，在编写XML文件时，
使用换行和缩进等方式来让原文件中的内容清晰可读的“良好”书写习惯可能要被迫改变。
4）格式良好的XML文档必须有且仅有一个根标签，其它标签都是这个根标签的子孙标签。 


   3)属性(附加信息的描述)
1)属性由属性名和属性值组成，属性值由定界符""或'组合
2）当一个事务必须与对象绑定在一起，没有该对象，该事务就没有意义， 此时该事务就应成为对象的属性。
3）一个标签可以有多个属性，每个属性都有它自己的名称和取值，例如：<input name=“text”/>
4）多学一招：在XML技术中，标签属性所代表的信息，也可以被改成用 子元素 的形式来描述，例如：
<input>
  <name>text</name>
</input>


   4)注释(不能随意嵌套)  
1)给程序员看的
2)不能嵌套使用


   5)CDATA区 、特殊字符
     在编写XML文件时，有些内容可能 不想让解析引擎解析 执行，而是当作原始内容处理。
 遇到此种情况，可以把这些内容放在CDATA区里，对于CDATA区域内的内容，XML解析程序不会处理，而是直接 原封不动 的输出。
 语法：<![CDATA[  内容   ]]>
<![CDATA[
<itcast>
<br/>
</itcast>
]]>
1)Character Data（字符数据区/段）
2）CDATA段中的数据不会被XML解析器所解析
3）不能嵌套使用
4）XML内置5种转义字符
< > & " '
     
*7 xml约束
XML DTD(易学，功能有限） Document Type Definition
XML Schema (难学，功能强大）


1) 类是对象的约束
2）DTD是XML文件的约束
        3）浏览器对XML和DTD进行语法的检测
        4）浏览器不会检测XML 是否符合 DTD规则
5） 正确的 XML 和 有效的 XML文件
正确的XML文件是指语法正确，而有效的XML文件是指语法和规则都正确
6)XML中书写DTD有二种方式：
a)DTD和XML分离
b)XML中嵌入DTD
6)XML引用DTD有二种方式：
a) SYSTEM ：个人或组织，小范围内使用
b) PUBLIC ：大范围内使用,例如：struts框架。。。
7)EMPTY和ANY，项目中尽量使用EMPTY，少用ANY
        8)在DTD中，必须将所有的标签全部都声明完才行
9)在DTD中，定义元素时，可以使用如下符号：
a)+：有且只能出现1次或N次
b)*：有且只能出现0次或N次
c)?：有且只能出现0次或1次
d)无：有且只能出现1次
注意：以上符号用在()里面
10)DTD属性的设置值情况有四种：
a)#REQURIED：该属性必须出现
b)#IMPLIED：该属性可有可无
c)#FIXED "固定值"：该属性可有可无，如果有的话，必须是"固定值"
d)"默认值"：该属性可有可无，如果没有的话，用默认值补充，如果有的话，用新值替代旧值
         11)当页面出现多个相同的字符串，此时可以使用引用实体来解决，在DTD中定义，在XML中使用
 12）当定义DTD时，出个相同的子元素，此时可以使用 参数实体 来解决，在DTD中定义，在DTD中使用，
     使用%标识，通过%参数实体名;来引用   
 <?xml version="1.0" encoding="UTF-8"?>
<!ENTITY % TIP  "姓名">   
<!ELEMENT root (客户,员工)>
<!ELEMENT 客户  (%TIP;)>
<!ELEMENT 员工  (%TIP;)>
<!ELEMENT 姓名  (#PCDATA)>   
----------------------------
*1 dom4j解析器
  1）CRUD的含义：CreateReadUpdateDelete增删查改
  2）XML解析器有二类，分别是DOM和SAX。
a)DOM一次性将整个XML文件读到内存，形成一个倒状的树形结构
        b)SAX多次将整个XML文件读到内存
        c)Document对象代表XML文件在内存中的映像 
  3)常用的API如下：
SAXReader saxReader = new SAXReader();               SAXReader 是dom4j的核心类
Document document = saxReader. read ("*.xml")
Document.getRootElement()
Element.getName()
Element.elements()：取得该元素下的所有直接子元素
  Element.elementText()：从一个元素导航到另一个元素且取出该元素的文本
Element.element("车牌") ：从一个元素导航到另一个元素
Element.attributeValue("出产时间")：取得一个元素对应的属性
Element.addElement("单价").setText("40")：添加新元素，同时设置该元素文本的值
OutputFormat format = OutputFormat.createPrettyPrint()：使用缩格形式写XML文件
XMLWriter xmlWriter = new XMLWriter(os,format)：构造XML写入器
xmlWriter.write(document)：将内存中的document对象写入硬盘
firstCarElement.remove(firstCarPriceElement)：从直接父元素删除直接子元素
firstCarPriceElement.getParent().remove(firstCarPriceElement)：从直接父元素删除直接子元素


*2 基于dom4j的 xpath 技术------>定位其节点
  1)能够在xml文件中，快速定位需要元素，无需从根元素一个一个的导航到需要的子元素
Document.selectNodes()：取得所有符合xpath格式的元素
Document.selectSingleNode()：取得所有符合xpath格式的元素的第一个元素
Node类型是Element/Text/Attribute/Document/...类型的父接口
  
3 简单工厂设计模式
  1)目的就是统一管理访问层的所有Dao，让Service在Dao的处理上相对独立
  2)引用DaoFactory来管理所有的具体Dao，并采用单例模式限制DaoFactory的个数


6 SAX解析器 
  1)sun公司提供的一个 基于事件的xml解析器
  2) SAXParser 是SAX解析器的核心类，在使用过程中，需要一个SAX处理器，该处理器必须扩展DefaultHandler
  3)SAX解析器在解析XML文件时，会根据XML文件 此时的状态 ，即开始标签，结束标签， 调用 SAX处理器对应的方法
  4)SAX解析器在解析XML文件时，自动导航，无需像dom4j一样，人为导航
  5)SAX解析器会将 空白字符 当作一个有效字符对待
 ==========================================================
<? xml  version="1.0" encoding="UTF-8"?>
<车辆清单> 
  <汽车> 
    <车牌 出产时间="2010年">奥迪</车牌>  
    <产地>北京</产地>  
    <单价>30</单价> 
  </汽车>  
  <汽车> 
    <车牌 出产时间="2011年">本田</车牌>  
    <产地>广州</产地>  
    <单价>60</单价> 
  </汽车>  </车辆清单>   

//使用dom4j解析 xml 文件
public   class  Demo1 {
     public   static   void  main(String[]  args )  throws  Exception {
         //创建dom4j解析器
        SAXReader  saxReader  =  new  SAXReader();
         //加载需要解析的 xml 文件
        Document  document  =  saxReader .read( new  File( "src/cn/itcast/xml/dom4j/car.xml" ));
         //取得根元素
        Element  rootElement  =  document . getRootElement ();
         //显示根元素的名称
        System. out .println( rootElement .getName());
         //取得根元素下的子元素
        List<Element>  elementList  =  rootElement .elements() ;
        System. out .println( "共有"  +  elementList .size()+ "辆车" );
         for (Element  e  :  elementList ){
            System. out .println( "车牌："  +  e .elementText( "车牌" ));// 车牌下面的text是啥
            System. out .println( "产地："  +  e .elementText( "产地" ));
            System. out .println( "出产时间："  +  e .element( "车牌" ).attributeValue( "出产时间" ));
            System. out .println( "------------------------------" );
        }
    } }   

--------------------------------------
//使用dom4j操作 xml 文件的 cud
public   class  Demo2 {
     @Test
     public   void  create()  throws  Exception{
        Document  document  = getDocument();
        Element  rootElement  =  document .getRootElement();
         //取得第一辆汽车
        Element  firstCarElement  = (Element)  rootElement .elements().get(0);
         //添加新元素"单价"，并设置文本为30
         firstCarElement .addElement( "单价" ).setText( "40" );
         //将内存中的 xml 文件写到硬盘中
        write2xml( document );
    }
     private   void  write2xml(Document  document )  throws  Exception {
        OutputFormat  format  = OutputFormat. createPrettyPrint (); //有换行，一般中文用
         //OutputFormat format = OutputFormat.createCompactFormat();//单行，无换行
        OutputStream  os  =  new  FileOutputStream( "src/cn/itcast/xml/dom4j/car.xml" );
        XMLWriter  xmlWriter  =  new  XMLWriter( os , format );
         xmlWriter .write( document );
         xmlWriter .close();
    }
     private  Document getDocument()  throws  Exception {
        SAXReader  saxReader  =  new  SAXReader();
        Document  document  =  saxReader .read( new  File( "src/cn/itcast/xml/dom4j/car.xml" ));
         return   document ;
    }
     @Test
     public   void  update()  throws  Exception{
        Document  document  = getDocument();
        Element  rootElement  =  document .getRootElement();
        Element  firstCarElement  = (Element)  rootElement .elements().get(0);
         firstCarElement .element( "单价" ).setText( "60" );
        write2xml( document );
    }
     @Test
     public   void  delete()  throws  Exception{
        Document  document  = getDocument();
        Element  rootElement  =  document .getRootElement();
        Element  firstCarElement  = (Element)  rootElement .elements().get(0);
        Element  firstCarPriceElement  =  firstCarElement .element( "单价" );
         firstCarElement .remove( firstCarPriceElement );
        // firstCarPriceElement.getParent().remove(firstCarPriceElement);
        write2xml( document );
    } }   

----------------------------------------------
XML的内容读到对象中并按价格排序

public   class  Demo3 {
     public   static   void  main(String[]  args )  throws  Exception {
        SAXReader  saxReader  =  new  SAXReader();
        Document  document  =  saxReader .read( new  File( "src/cn/itcast/xml/dom4j/car.xml" ));
        List<Element>  elementList  =  document .getRootElement().elements() ;
        List<Car>  carList  =  new  ArrayList<Car>();
         for (Element  e  :  elementList ){
            Car  car  =  new  Car();
             car .setBand( e .elementText( "车牌" ));
             car .setPlace( e .elementText( "产地" ));
             car .setTime( e .element( "车牌" ).attributeValue( "出产时间" ));
             car .setPrice(Integer. parseInt ( e .elementText( "单价" )));
             carList .add( car );
        }
         //System.out.println("按单价排序前：");
         //show(carList);
        System. out .println( "按单价排序后：" );
         sortByPriceDesc ( carList );
    }
     public   static   void  sortByPriceDesc(List<Car>  carList ) {
        Collections. sort ( carList );
         show ( carList );
    }
     public   static   void  show(List<Car>  carList ){
         if ( carList != null  &&  carList .size()>0){
             for (Car  car  :  carList ){
                System. out .print( "车牌：" + car .getBand()+ "\t" );
                System. out .print( "产地：" + car .getPlace()+ "\t" );
                System. out .print( "单价：" + car .getPrice()+ "\t" );
                System. out .println( "出产时间：" + car .getTime());
            }
        }
    } }   

-------------------------------------
//使用dom4j其它的API
public   class  Demo4 {
     public   static   void  main(String[]  args )  throws  Exception {
        
         //String->XML
        String  text  =  "<root><res>这是根元素</res></root>" ;
        Document  document  =  DocumentHelper . parseText ( text );
        OutputFormat  format  = OutputFormat. createPrettyPrint ();
        OutputStream  os  =  new  FileOutputStream( "src/cn/itcast/xml/dom4j/string2xml.xml" );
        XMLWriter  xmlWriter  =  new  XMLWriter( os , format );
         xmlWriter .write( document );
         xmlWriter .close();
         
        
         //创建空XML文件
        Document  document  =  DocumentHelper . createDocument ();
         document .addElement( "root" ).setText( "这是根元素" );
        OutputFormat  format  = OutputFormat. createPrettyPrint ();
        OutputStream  os  =  new  FileOutputStream( "src/cn/itcast/xml/dom4j/empty.xml" );
        XMLWriter  xmlWriter  =  new  XMLWriter( os , format );
         xmlWriter .write( document );
         xmlWriter .close();
         
        
         //指定插入次序，默认插入到最后
        SAXReader  saxReader  =  new  SAXReader();
        Document  document  =  saxReader .read( new  File( "src/cn/itcast/xml/dom4j/car.xml" ));
        List<Element>  elementList  =  document .getRootElement().elements() ;
        Element  newCarElement  =  DocumentHelper . createElement ( "汽车" );
         newCarElement .setText( "这是我的汽车" );
         elementList .add(1, newCarElement );
        OutputFormat  format  = OutputFormat. createPrettyPrint ();
        OutputStream  os  =  new  FileOutputStream( "src/cn/itcast/xml/dom4j/car.xml" );
        XMLWriter  xmlWriter  =  new  XMLWriter( os , format );
         xmlWriter .write( document );
         xmlWriter .close();      
        
         //XML->String
        SAXReader  saxReader  =  new  SAXReader();
        Document  document  =  saxReader .read( new  File( "src/cn/itcast/xml/dom4j/car.xml" ));
        Element  rootElement  =  document .getRootElement();
        Element  firstCarElement  = (Element)  rootElement .elements().get(0);
        String  xml  =  firstCarElement . asXML() ;
        System. out .println( xml );
    } }  
=============xpath================
//输入输出
public   class  LoginUI {
     public  User input(){
        User  user  =  new  User();
        Scanner  scanner  =  new  Scanner(System. in );
        System. out .print( "用户名：" );
        String  username  =  scanner . nextLine ();
        System. out .print( "密码：" );
        String  password  =  scanner .nextLine();
         user .setUsername( username );
         user .setPassword( password );
         return   user ;
    }
     public   void  output( boolean   flag ){
         if ( flag ){
            System. out .println( "登录成功" );
        } else {
            System. out .println( "登录失败" );
        }
    } }  
----------------------------------- 

public   class  LoginBusiness {
     //测试
     public   static   void  main(String[]  args )  throws  Exception {
        
        LoginUI  loginUI  =  new  LoginUI();
        LoginBusiness  lognBusiness  =  new  LoginBusiness();
        
        User  user  =  loginUI .input();
         boolean   flag  =  lognBusiness .check( user );
        
         loginUI .output( flag );
        
    }
     //判段
     public   boolean  check(User  user )  throws  Exception{
         boolean   flag  =  false ;
        SAXReader  saxReader  =  new  SAXReader();
        Document  document  =  saxReader .read( new  File( "src/cn/itcast/xml/xpath/users.xml" ));
        String  xpath  =  "//user[@username='" + user .getUsername()+ "' and @password='" + user .getPassword()+ "']" ;
        Element  element  = (Element)  document . selectSingleNode ( xpath );
         if ( element != null ){
             flag  =  true ;
        }
         return   flag ;
    } }   

=============== 使用dom4j和反射技术 ==========================
<? xml  version="1.0" encoding="UTF-8"?>
<root>
    <class>
        <className>cn.itcast.xml.example2.Person</className>
        <methodName>jump</methodName>
        <argType>java.lang.String</argType>
        <argValue>李四</argValue>
    </class> </root>   

-----------------------------
package  cn.itcast.xml.example2;
public   class  Person {
     public   void  run(String  who ){
        System. out .println( "Person::run()："  +  who );
    }
     public   void  jump(String  who ){
        System. out .println( "Person::jump()："  +  who );
    } }   

-----------------------------
public   class  Demo1 {
     public   static   void  main(String[]  args )  throws  Exception {
         //解析 xml 文件
         SAXReader   saxReader  =  new   SAXReader ();
         Document   document  =  saxReader .read( new  File( "src/cn/itcast/xml/example2/config.xml" ));
        String  className  =  document .selectSingleNode( "//className" ).getText();
        String  methodName  =  document .selectSingleNode( "//methodName" ).getText();
        String  argType  =  document .selectSingleNode( "//argType" ).getText();
        String  argValue  =  document .selectSingleNode( "//argValue" ).getText();
        
         //反射创建对象并执行方法
         Class   clazz  = Class. forName ( className );
        Method  method  =  clazz .getMethod( methodName ,Class. forName ( argType )) ;
         method .invoke( clazz .newInstance(), argValue );
    } }   

======================================


<? xml  version="1.0" encoding="UTF-8"?>
<students> 
  <student id="2011100801"> 
    <name> keke </name>     //也可作为其属性
    <age>11</age> 
  </student>  </students>   

--------------------------------
package  cn.itcast.xml.example3.domain;
public   class  Student {
     private  String  id ;
     private  String  name ;
     private  String  age ;
     public  Student(){}
     public  String getId() {
         return   id ;
    }
     public   void  setId(String  id ) {
         this . id  =  id ;
    }
     public  String getName() {
         return   name ;
    }
     public   void  setName(String  name )  throws  Exception {
         if ( name.matches("[a-zA-Z]+") ){
             this . name  =  name ;
        } else {
             throw   new  Exception();
        }
    }
     public  String getAge() {
         return   age ;
    }
     public   void  setAge(String  age )  throws  Exception {
         if ( age .matches( "[0-9]+" )){
             this . age  =  age ;
        } else {
             throw   new  Exception();
        }
    } }   

------------------------------------
public   class  StudentDao {
     //根据编号更新学员信息
     public   void  update(Student  student )  throws  Exception {
         Document   document  =  getDocument ();
        String  xpath  =  "//student[@id='" + student .getId()+ "']" ;   //属性的要加@号  //student表示任意的student元素
         Element   element  = ( Element )  document .selectSingleNode( xpath );
         if ( element != null ){
             element .element( "name" ).setText( student .getName());
             element .element( "age" ).setText( student .getAge());
            write2xml( document );
        } else {
            System. out .println( "查无此学员" );
        }
    }
     //根据编号显示学员信息
     public   void  read(String  id )  throws  Exception{
         Document   document  =  getDocument ();
        String  xpath  =  "//student[@id='" + id + "']" ;
         Element   element  = ( Element )  document .selectSingleNode( xpath );
         if ( element != null ){
            System. out .println( "编号："  +  element .attributeValue( "id" ));
            System. out .println( "姓名："  +  element .elementText( "name" ));
            System. out .println( "年龄："  +  element .elementText( "age" ));
        } else {
            System. out .println( "查无此学员" );
        }
    }
     //根据编号删除某位学员的信息
     public   void  delete(String  id )  throws  Exception{
         Document   document  =  getDocument ();
        String  xpath  =  "//student[@id='" + id + "']" ;
         Element   element  = ( Element )  document .selectSingleNode( xpath );
         if ( element != null ){
             element .getParent().remove( element );
            write2xml( document );
        } else {
            System. out .println( "查无此学员" );
        }
    }
     //增加学员的信息
     public   boolean  create(Student  student )  throws  Exception{
         boolean   flag  =  false ;
         if ( student != null ){
             Document   document  =  null ;
             try  {
                 document  =  getDocument ();
            }  catch  (Exception  e ) {
                 //创建空XML文件
                 document  =  DocumentHelper .createDocument();
                 //创建<students>根元素
                 document .addElement( "students" );
            }
             Element   rootElement  =  document .getRootElement();
             Element   studentElement  =  rootElement .addElement( "student" );
             studentElement .addAttribute( "id" , student .getId());
             studentElement .addElement( "name" ).setText( student .getName());
             studentElement .addElement( "age" ).setText( student .getAge());
            write2xml( document );
             flag  =  true ;
        }
         return   flag ;
    }
     //将内存中的Document写到硬盘
     private   void  write2xml( Document   document )  throws  Exception {
         OutputFormat   format  =  OutputFormat .createPrettyPrint();
        OutputStream  os  =  new  FileOutputStream( "src/cn/itcast/xml/example3/db/students.xml" );
         XMLWriter   xmlWriter  =  new   XMLWriter ( os , format );
         xmlWriter .write( document );
         xmlWriter .close();
    }
     //取得Document对象
     private   Document  getDocument()  throws  Exception {
         SAXReader   saxReader  =  new   SAXReader ();
         Document   document  =  saxReader .read( new  File( "src/cn/itcast/xml/example3/db/students.xml" ));
         return   document ;
    }
}   

------------------------------------
public   class  StudentUI {
     public   static   void  main(String[]  args )  throws  Exception {
         input ();
    }
     public   static   void  input()  throws  Exception{
        Scanner  scanner  =  new  Scanner(System. in );
        System. out .print( "学员的编号：" );
        String  id  =  scanner .nextLine();
        System. out .print( "更新学员的姓名：" );
        String  name  =  scanner .nextLine();
        System. out .print( "更新学员的年龄：" );
        String  age  =  scanner .nextLine();
        Student  student  =  new  Student();
         student .setId( id );
         student .setName( name );
         student .setAge( age );
         StudentDao studentDao =  new  StudentDao();
        studentDao.update(student);
        
        
         键盘输入学员信息
         Scanner  scanner =  new  Scanner(System.in);
        System.out.print( "查询学员的编号：" );
        String  id  = scanner.nextLine();
        StudentDao  studentDao  =  new  StudentDao();
        studentDao.read(id);
        Scanner  scanner  =  new  Scanner(System.in);
        System.out.print( "删除学员的编号：" );
        String  id  = scanner.nextLine();
        StudentDao  studentDao  =  new  StudentDao();
        studentDao.delete(id);
        Scanner  scanner  =  new  Scanner(System.in);
        System.out.print( "用户名："  );
        String  name  = scanner.nextLine();
        System.out.print( "年龄："  );
        String  age  = scanner.nextLine();
         //封装成JavaBean对象
        Student  student  =  new  Student();
        student.setId(IdUtil.getId());
        student.setName(name);
        student.setAge(age);
         //调用 Dao 对象
        StudentDao  studentDao  =  new  StudentDao();
         boolean  flag = studentDao. create (student);
         if (flag){
            System.out.println( "操作成功" );
        } else {
            System.out.println( "操作失败" );
        }
        
    } }   

---------------------------------
public   class  IdUtil {     文件每次增一操作
     public   static  String  getId ()  throws  Exception{
        BufferedReader  br  =  new  BufferedReader( new  FileReader( "src/cn/itcast/xml/example3/ui/id.txt" ));
        String  id  =  br .readLine(); //"2011100801"(字符串)
         int   temp  = Integer. parseInt ( id )+1; //2011100802( int 型)
        BufferedWriter  bw  =  new  BufferedWriter( new  FileWriter( "src/cn/itcast/xml/example3/ui/id.txt" ));
         bw . write ( temp + "" );
         bw .flush();
         bw .close();
         return   id ;
    } }   

================SAX========================
SAX采用事件处理的方式解析XML文件，利用 SAX 解析 XML 文档，涉及两个部分：解析器和事件处理器：
解析器可以使用JAXP的API创建，创建出SAX解析器后，就可以指定解析器去解析某个XML文档。
解析器采用SAX方式在解析某个XML文档时，它只要解析到XML文档的一个组成部分，都会去调用事件处理器的一个方法，解析器在调用事件处理器的方法时，会把当前解析到的xml文件内容作为方法的参数传递给事件处理器。
事件处理器由程序员编写，程序员通过事件处理器中方法的参数，就可以很轻松地得到sax解析器解析到的数据，从而可以决定如何对数据进行处理。
//使用 sax 解析器解析 xml 文件
public   class  Demo1 {
     public   static   void  main(String[]  args )  throws  Exception {
         //创建SAX解析器工厂
        SAXParserFactory  factory  =  SAXParserFactory. newInstance () ;
         //创建SAX解析器
        SAXParser  saxParser  =  factory .newSAXParser();
         //加载 xml 文件
         saxParser .parse(
                 new  File( "src/cn/itcast/xml/sax/car.xml" ),
                 new  MyHandler());
    }
}
//自定义SAX处理器
class  MyHandler  extends  DefaultHandler{
     private   long   begin ;
     public   void   startDocument (){
        System. out .println( "解析XML文件开始" );
         begin  =  System. currentTimeMillis ();
    } 
     public   void   endDocument () {
        System. out .println( "解析XML文件结束" );
         long   end  = System. currentTimeMillis ();
        System. out .println( "解析XML共用"  + ( end - begin ) +  "毫秒" );
    }
     public   void   startElement (
            String  uri ,      //解析器传过来的参数
            String  localName , 
            String  qName , 
            Attributes  attributes ){
        System. out .println( "<" + qName + ">" );
        System. out .println( "有" + attributes .getLength()+ "个属性" );
        System. out .println( attributes .getValue( "出产时间" ));
    } 
     public   void  endElement(
            String  uri , 
            String  localName , 
            String  qName ){
        System. out .println( "</" + qName + ">" );
    } 
     public   void  characters(
             char []  ch , 
             int   start , 
             int   length ){
        String  content  =  new  String( ch , start , length );
         if ( content .trim().length()>0){
            System. out .println( content );
        }
    } 
}
================= dom解析器 ========================
1 理解dom解析器机制
  1)dom解析和dom4j原理一致(但是属于 比较老的api 了)
  2)Node是所有元素的父接口
  3)常用的API：
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();取得DOM解析器工厂
DocumentBuilder domParser = factory.newDocumentBuilder();取得DOM解析器
domParser.parse(*.xml)加载需要解析的XML文件
Document.getDocumentElement()取得XML文件的根元素/节点
Element.getNodeName()：取得根元素
Element.getElementsByTagName("汽车")取得"汽车"元素的集合
NodeList.item(i)取得第N个元素，从0开始
Element.getTextContent()：取得元素的文本内容
Element.getAttributes().getNamedItem("出产时间").getTextContent()：取得元素中某属性的值
document.createElement("汽车");创建新元素
Element.setTextContent("我的汽车");设置元素的内容
Element.appendChild(newCarElement);在尾部添加元素
Element.insertBefore(newCarElement,
    rootElement.getElementsByTagName("汽车").item(1));在指定的元素前添加元素
TransformerFactory tf = TransformerFactory.newInstance();创建输出工厂
Transformer transformer = tf.newTransformer();创建输出对象
Source source = new DOMSource(document);创建内存的document对象
Result result = new StreamResult(new File("src/cn/itcast/xml/dom/car.xml"));指定输出的目标地点
transformer.transform(source,result);将document对象输出到xml文件中
        Element.setTextContent("深圳");更新元素的内容
Element.removeChild(secondCarElement);在父元素基础上删除直接子元素
   4)dom解析器会将空白字符当作有效元素对待 
   5)要让dom解析器将空白字符忽略，必须满足二条件
a)对XML文件必须写一个DTD约束
b)factory.setIgnoringElementContentWhitespace(true);
   6)dom类解析器和sax类解析器
a)dom是一次性加载到内容，形成document对象，人工导航，适合curd
b)sax是分次性加载到内容，sax解析器导航，但程序员需要编写sax处理器，必须扩展DefaultHandler类，适合r
----------------------------------------
//使用DOM解析器解析XML文件
public   class  Demo1 {
     public   static   void  main(String[]  args )  throws  Exception {
        DocumentBuilderFactory  factory  = DocumentBuilderFactory. newInstance ();
        DocumentBuilder  domParser  =  factory .newDocumentBuilder();
        Document  document  =  domParser .parse( new  File( "src/cn/itcast/xml/dom/car.xml" ));
        Element  rootElement   =  document .getDocumentElement();
        System. out .println( "根元素为：" + rootElement .getNodeName());
        NodeList  nodeList  =  rootElement .getElementsByTagName( "汽车" );
        System. out .println( "共有："  +  nodeList .getLength()+ "辆汽车" );
        System. out .println( "++++++++++++++++++++++++++" );
         for ( int   i =0; i < nodeList .getLength(); i ++){
            Element  element  = (Element)  nodeList .item( i );
            String  band  =  element .getElementsByTagName( "车牌" ).item(0).getTextContent();
            String  place  =  element .getElementsByTagName( "产地" ).item(0).getTextContent();
            String  price  =  element .getElementsByTagName( "单价" ).item(0).getTextContent();
            String  time  =  element .getElementsByTagName( "车牌" ).item(0).getAttributes().getNamedItem( "出产时间" ).getTextContent();        
            
            System. out .println( "车牌："  +  band );
            System. out .println( "产地："  +  place );
            System. out .println( "单价："  +  price );
            System. out .println( "出产时间："  +  time );
            System. out .println( "-------------------------" );
        }
    } }   

----------------------------------------
public   class  Demo2 {
     // dom 是否将 空白字符当作一个有效的元素对待
     public   static   void  main(String[]  args )  throws  Exception{
        Document  document  =  getDocument ();
        Element  rootElement  =  document .getDocumentElement();
        NodeList  nodeList  =  rootElement .getChildNodes();
        System. out .println( "共有"  +  nodeList .getLength()+ "个直接元素" );
    }
     @ Test
     public   void  create()  throws  Exception{
        Document  document  =  getDocument ();
        Element  newCarElement  =  document .createElement( "汽车" );
         newCarElement .setTextContent( "我的汽车" );
        Element  rootElement  =  document .getDocumentElement();
         //rootElement.appendChild(newCarElement);
         rootElement .insertBefore(
                 newCarElement ,
                 rootElement .getElementsByTagName( "汽车" ).item(1));
        write2xml( document );
    }
     @ Test
     public   void  update()  throws  Exception{
        Document  document  =  getDocument ();
        Element  secondCarElement  = (Element)  document .getElementsByTagName( "汽车" ).item(1);
         secondCarElement .getElementsByTagName( "产地" ).item(0).setTextContent( "深圳" );
         secondCarElement .getElementsByTagName( "车牌" ).item(0).getAttributes().getNamedItem( "出产时间" ).setTextContent( "2012年" );
        write2xml( document );
    }
     @ Test
     public   void  delete()  throws  Exception{
        Document  document  =  getDocument ();
        Element  rootElement  =  document .getDocumentElement();
        Element  secondCarElement  = (Element)  rootElement .getElementsByTagName( "汽车" ).item(1);
         rootElement .removeChild( secondCarElement );
        write2xml( document );
    }
     private   void  write2xml(Document  document ) throws  Exception {
         //将内存中的document对象写到外存的 xml 文件
        TransformerFactory  tf  = TransformerFactory. newInstance ();
        Transformer  transformer  =  tf .newTransformer();
         //源
        Source  source  =  new  DOMSource( document );
         //目
        Result  result  =  new  StreamResult( new  File( "src/cn/itcast/xml/dom/car.xml" ));
         transformer .transform( source , result );
    }
     private   static  Document getDocument()  throws  Exception {
        DocumentBuilderFactory  factory  = DocumentBuilderFactory. newInstance ();
         //设置 dom 解析器将空白字符过滤
         factory . setIgnoringElementContentWhitespace ( true );
        DocumentBuilder  domParser  =  factory .newDocumentBuilder();
        Document  document  =  domParser .parse( new  File( "src/cn/itcast/xml/dom/car.xml" ));
         return   document ;
    } }   

======================
DOM
很方便对文档进行遍历
对文档curd也特别方便
xml文档比较大的时候，dom解析占用的内存也会比较大，浪费系统资源。所以dom解析这种方式不适合解析大的xml文档。
SAX
解析文件速度快，占用资源（内存）少。
sax解析只适合读取文档数据，不适合对文档进行增删改



