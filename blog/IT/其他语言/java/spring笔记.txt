①  spring是什么?

struts 是 web 框架 (jsp/action/actionfrom)

hibernate 是 orm框架,处于持久层.

spring 是容器框架,用于配置bean,并维护bean之间关系的框架 

☞  spring中有一个非常概念: bean (是java中的任何一种对象 javabean/service/action/数据源./dao, ioc(控制反转 inverse of control) di( dependency injection 依赖注入)

开发一个spring项目.

1.  引入spring的开发包(最小配置spring.jar 该包把常用的jar都包括, 还要 写日志包 common-logging.jar

2.  创建spring的一个核心文件  applicationContext.xml , [hibernate有核心 hibernate.cfg.xml struts核心文件 struts-config.xml], 该文件一般放在src目录下,该文件中引入 xsd文件 ：

3.  配置bean

<!-- 在容器文件中配置bean(service/dao/domain/action/数据源) -->

<!-- bean元素的作用是，当我们的spring框架加载时候，spring就会 自动的创建一个bean对象，并放入内存 

UserService userSerivce=new UserService();

userSerivce.setName("韩顺平");

-->

<bean id="userService" class="com.service.UserService">

<!-- 这里就体现出注入的概念. -->

<property name="name">

     <value>韩顺平</value>

</property>

</bean>

4.  我们现在使用 spring 来完成上面的任务

//1.得到spring 的applicationContext对象(容器对象)

ApplicationContext  ac=new    ClassPathXmlApplicationContext ("applicationContext.xml");

UserService us=( UserService ) ac. getBean ("userService");       肯定return的是一个对象，大的转小的要强转一下

us.sayHello();

5.1  使用spring ， 没有new 对象,我们把创建对象的任务交给spring框架

spring实际上是一个容器框架，可以配置各种bean(action/service/domain/dao),并且可以维护bean与bean的关系,当我们需要使用某个bean的时候，我们可以 getBean (id),使用即可.

------------------------------------------------------------

ioc是什么?

答 ：ioc(inverse of controll ) 控制反转: 所谓控制反转就是把 创建对象(bean),和维护对象(bean)的关系的权利从程序中转移到spring的容器 (applicationContext.xml),而程序本身不再维护.

DI是什么?

答: di(dependency injection) 依赖注入: 实际上di和ioc是同一个概念，spring设计者认为di更准确表示spring核心技术

  学习框架，最重要的就是学习各个配置 .

把Applicationcontext做成一个单例的.

  spring开发提倡接口编程,配合di技术可以 层与层的解耦

举例说明:

现在我们体验一下spring的di配合接口编程的，完成一个字母大小写转换的案例:

思路:

1.  创建一个接口 ChangeLetter

2.  两个类实现接口

3.  把对象配置到spring容器中

4.  使用

通过上面的案例，我们可以初步体会到di配合接口编程，的确可以减少层(web层) 和 业务层的耦合度.




从ApplicationContex 应用上下文容器中获取bean        和        从bean工厂容器中获取bean

//从ApplicationContext中取bean

ApplicationContext   ac=new  ClassPathXmlApplicationContext ("com/hsp/ioc/beans.xml");

//当我们去实例化beans.xml,该文件中配置的bean被实例(该bean scope是  singleton) 从bean中取出student





//如果我们使用beanfactory去获取bean，当你只是实例化该容器， 那么

//容器的bean不被实例化,只有当你去使用 getBean 某个bean时，才会实时的创建.



BeanFactory factory = new  XmlBeanFactory ( new ClassPathResource("com/hsp/ioc/beans.xml"));

factory.getBean("student");

结论: 

1.如果使用ApplicationContext ，则配置的bean如果是 singlton不管你用不用，都被实例化 所有单例bean. .( 好处就是可以预先加载 , 缺点就是耗内存 )

2.如果是 BeanFactory ,则当你获取beanfacotry时候，配置的bean不会被马上实例化，当你使用的时候，才被实例(好处节约内存,缺点就是速度)

3.规定: 一般没有特殊要求，应当使用 ApplicatioContext 完成(90%)

u  bean 的  scope的细节

 

入门案例:

//获取两个student

Student s1=(Student) ac.getBean("student");

Student s2=(Student) ac.getBean("student");

System.out.println(s1+" "+s2);          看是否是一个对象

 ===========================================

三种获取ApplicationContext 对象引用的方法



1.ClassPathXmlApplicationContext:从类路径中加载。

2.FileSystemXmlApplicationContext:从文件系统加载。

3.XmlWebApplicationContext:从web系统中加载。



ApplicationContext context =   new FileSystemXmlApplicationContext("  c:\foo.xml");

  bean的生命周期

①  实例化(当我们的程序加载beans.xml文件)，把我们的bean(前提是scope=singleton)实例化到内存

②  调用set方法设置属性

③  如果你实现了bean名字关注接口( BeanNameAware ) 则，可以通过setBeanName获取id号

④  如果你实现了 bean工厂关注接口，( BeanFactoryAware ),则可以获取BeanFactory

⑤  如果你实现了  ApplicationContextAware 接口，则调用方法 

//该方法传递ApplicationContext

public void  setApplicationContext (ApplicationContext arg0)  throws BeansException {

System.out.println("setApplicationContext"+arg0);



}

⑥  如果bean 和 一个后置处理器关联,则会自动去调用  Object postProcessBeforeInitialization 方法

⑦  如果你实现 InitializingBean   接口，则会调用  afterPropertiesSet

⑧  如果自己在<bean init-method= ” init ”  /> 则可以在bean定义自己的初始化方法.

⑨  如果bean 和 一个后置处理器关联,则会自动去调用  Object postProcess After Initialization 方法

⑩  使用我们的bean

11. 容器关闭

12. 可以通过实现 DisposableBean   接口来调用方法 destory

13. 可以在<bean destory-method= ” fun1 ” /> 调用定制的销毁方法

小结: 我们实际开发中往往，没有用的这么的过程,常见的是:

1->2->6->10->9->11 

问题:通过BeanFactory来获取bean对象，bean的生命周期是否和Applicationcontext 是一样吗?

不是一样的，bean是工厂中创建的生命周期会简单一些:




    配置bean的细节

① scope 的说明:

 

☞  尽量使用 scope= ” singleton ”  ,不要使用prototype,因为这样对我们的性能影响较大.

②  如何给集合类型注入值 .

java中主要的集合有几种: map set list / 数组 


<
bean 
id
="department" 
class
="com.hsp.collection.Department"
>

<
property 
name
="name" 
value
="
财务部
"
/>


<!-- 
给数组注入值 
-->

<
property 
name
="empName"
>

   <
list
>

      <
value
>
小明
</
value
>

      <
value
>
小明小明
</
value
>

      <
value
>
小明小明小明小明
</
value
>

   </
list
>

</
property
>

<!-- 
给
list
注入值
 list 
中可以有相当的对象 
-->

<
property 
name
="empList"
>

   <
list
>

      <
ref 
bean
="emp2" 
/>

      <
ref 
bean
="emp1"
/>

      <
ref 
bean
="emp1"
/>

      <
ref 
bean
="emp1"
/>

      <
ref 
bean
="emp1"
/>

      <
ref 
bean
="emp1"
/>

      <
ref 
bean
="emp1"
/>

   </
list
>

</
property
>

<!-- 
给
set
注入值
 set
不能有相同的对象 
-->

<
property 
name
="empsets"
>

   <
set
>

      <
ref 
bean
="emp1" 
/>

      <
ref 
bean
="emp2"
/>

      <
ref 
bean
="emp2"
/>

      <
ref 
bean
="emp2"
/>

      <
ref 
bean
="emp2"
/>

   </
set
>

</
property
>

<!-- 
给
map
注入值
 map
只有
key
不一样，就可以装配
value -->

<
property 
name
="empMaps"
>

   <
map
>

      <
entry 
key
="11" 
value-ref
="emp1" 
/> 

      <
entry 
key
="22" 
value-ref
="emp2"
/>

      <
entry 
key
="22" 
value-ref
="emp1"
/>

   </
map
>

</
property
>

<!-- 
给属性集合配置 
-->

<
property 
name
="pp"
>

   <
props
>

      <
prop 
key
="pp1"
>abcd</
prop
>

      <
prop 
key
="pp2"
>hello</
prop
>

   </
props
>

</
property
>

</
bean
>

<
bean 
id
="emp1" 
class
="com.hsp.collection.Employee"
>

<
property 
name
="name" 
value
="
北京
"
/>

<
property 
name
="id" 
value
="1"
/>

</
bean
>

<
bean 
id
="emp2" 
class
="com.hsp.collection.Employee"
>

<
property 
name
="name" 
value
="
天津
"
/>

<
property 
name
="id" 
value
="2"
/>

</
bean
>

</
beans
>



③  内部bean



  <bean id="foo" class="...Foo">





        <property name="bar">





              <bean class="...Bar">





        </property>  





  </bean>        这种方式的缺点是你无法在其它地方重用这个bar实 例，原因是它是专门为foo而用。



④  继承配置

public class Student 

public class Gradate extends Student

在beans.xml文件中体现配置 

<bean id="student" class="com.hsp.inherit.Student">

<property name="name" value="顺平" />

<property name="age" value="30"/>

</bean>

<bean id="grdate"  parent="student"  class="com.hsp.inherit.Gradate">

<!-- 如果自己配置属性name,age,则会 替换 从父对象继承的数据  -->

<property name="name" value="小明"/>

<property name="degree" value="学士"/>

</bean>

思考: 目前我们都是通过 set方式给bean注入值， spring还提供其它的方式注入值，比如通过构造函数注入值!

  通过构造函数注入值

<!-- 配置一个雇员对象 -->

<bean id="employee" class="com.hsp.constructor.Employee">

<!-- 通过构造函数来注入属性值 -->

< constructor-arg  index="0" type="java.lang.String" value="大明" />

</bean>

 

自动装配b ean的属性值         一般能用set注入的就行了，没必要用自动注入，因为不清晰



   <bean id="foo" class="...Foo" autowire="autowire type">





    有四种自动装配类型：





    1.byName寻找和属性名相同的bean,若找不到，则装不上。





    2.byType:寻找和属性类型相同的bean,找不到,装不上,找到多个抛异常。





    3.constructor:查找和bean的构造参数一致的一个或





      多个bean，若找不到或找到多个，抛异常。按照参数的类型装配  





    4.autodetect: (3)和(2)之间选一个方式。不确定





       性的处理与(3)和(2)一致。





    5.defualt : 这个需要在<beans defualt-autorwire=“指定” />





    6.no : 不自动装配，这是autowrite的默认值. 使用spring的特殊bean,完 成分散配置:

beans.xml

说明: 当通过  context:property-placeholder  引入 属性文件的时候，有多个需要使用 , 号间隔.

<!-- 引入我们的db.properties文件 -->

< context:property-placeholder  location="classpath:com/hsp/dispatch/db.properties,classpath:com/hsp/dispatch/db2.properties"/>

<!-- 配置一DBUtil对象 $ 占位符 号 -->

<bean id="dbutil" class="com.hsp.dispatch.DBUtil">

<property name="name" value=" ${name} " />

<property name="drivername" value="${drivername}" />

<property name="url" value="${url}" />

<property name="pwd" value="${pwd}" />

</bean>

 

<!-- 配置一DBUtil对象 -->

<bean id="dbutil2" class="com.hsp.dispatch.DBUtil">

<property name="name" value="${db2.name}" />

<property name="drivername" value="${db2.drivername}" />

<property name="url" value="${db2.url}" />

<property name="pwd" value="${db2.pwd}" />

</bean>

 

db.properties:

name=scott

drivername=oracle:jdbc:driver:OracleDirver

url=jdbc:oracle:thin:@127.0.0.1:1521:hsp

pwd=tiger aop编程

aop( aspect oriented programming ) 面向切面(方面)编程,是对所有对象或者是一类对象编程,核心是( 在 不 增加代码的基础上，  还 增加新功能   )

面向切面  spring( ->aop)   面向 n多对象编程

aop特别提醒: aop编程，实际上在 开发框架本身用的多, 在实际项目中，用的不是很多,但是将来会越来越多，这个一个趋势.

编程说明:

步骤:

1.  定义接口

2.  编写对象(被代理对象=目标对象)

3.  编写通知（前置通知 目标方法调用前调用 ）

4.  在beans.xml文件配置

4.1  配置 被代理对象=目标对象

4.2  配置通知

4.3  配置代理对象 是  ProxyFactoryBean 的对象实例

4.3.1  <!-- 代理接口集 -->

4.3.2  织入通知

4.3.3  配置被代理对象

 

提问? 说spring的aop中，当你通过代理对象去实现aop的时候，获取的ProxyFactoryBean是什么类型？

答: 返回的是一个代理对象,如果目标对象实现了接口，则spring使用jdk 动态代理技术,如果目标对象没有实现接口，则spring使用 CGLIB技术.



3.1 AOP介绍

3.1.1 定义AOP术语

  1.切面(aspect):要实现的交叉功能，是系统模块化的一个切面或领域。如日志记录。

  2.连接点:应用程序执行过程中插入切面的地点，可以是方法调用，异常抛出，或者要修改的

               字段。

  3.通知:切面的实际实现，他通知系统新的行为。如在日志通知包含了实

            现日志功能的代码，如向日志文件写日志。通知在连接点插入到应用系统中。

  4.切入点:定义了通知应该应用在哪些连接点，通知可以应用到AOP框架支持的任何连接点。

  5.引入:为类添加新方法和属性。

  6.目标对象:被通知的对象。既可以是你编写的类也可以是第三方类。

  7.代理:将通知应用到目标对象后创建的对象，应用系统的其他部分不用为了支持代理对象而

            改变。

  8.织入:将切面应用到目标对象从而创建一个新代理对象的过程。织入发生在目标

            对象生命周期的多个点上：

            编译期：切面在目标对象编译时织入.这需要一个特殊的编译器.

            类装载期：切面在目标对象被载入JVM时织入.这需要一个特殊的类载入器.

            运行期：切面在应用系统运行时织入.
在spring中所有的通知都是以java类的形式编写的。切入点定义在配置文件中编写，

--------------------------
3.1 AOP介绍
3.1.2 SpringAOP实现(续)
   spring的运行时通知对象 
   spring在运行期创建代理,不需要特殊的编译器.
      spring有两种代理方式：
      1.若目标对象实现了若干接口，spring使用JDK的
         java.lang.reflect.Proxy类代理。该类让spring动态产生
         一个新类，它实现了所需的接口，织入了通知，并且代理对
         目标对象的所有请求。
      2.若目标对象没有实现任何接口，spring使用
         CGLIB库生成目标对象的子类。使用该方式时需要注意:
          1.对接口创建代理优于对类创建代理，因为会产生更加松耦合的系统。
             对类代理是让遗留系统或无法实现接口的第三方类库同样可以得到通知，
            这种方式应该是备用方案。
          2.标记为final的方法不能够被通知。spring是为目标类产生子类。任何需要
             被通知的方法都被复写，将通知织入。final方法是不允许重写的。
  spring实现了aop联盟接口。
  spring只支持方法连接点：不提供属性接入点，spring的观点是属性拦截破坏了
  封装。面向对象的概念是对象自己处理工作，其他对象只能通过方法调用的得到的
  结果。
3.1 AOP介绍
3.1.2 SpringAOP实现(续)
   spring的运行时通知对象 
   spring在运行期创建代理,不需要特殊的编译器.
      spring有两种代理方式：
      1.若目标对象实现了若干接口，spring使用JDK的
         java.lang.reflect.Proxy类代理。该类让spring动态产生
         一个新类，它实现了所需的接口，织入了通知，并且代理对
         目标对象的所有请求。
      2.若目标对象没有实现任何接口，spring使用
         CGLIB库生成目标对象的子类。使用该方式时需要注意:
          1.对接口创建代理优于对类创建代理，因为会产生更加松耦合的系统。
             对类代理是让遗留系统或无法实现接口的第三方类库同样可以得到通知，
            这种方式应该是备用方案。
          2.标记为final的方法不能够被通知。spring是为目标类产生子类。任何需要
             被通知的方法都被复写，将通知织入。final方法是不允许重写的。
  spring实现了aop联盟接口。
  spring只支持方法连接点：不提供属性接入点，spring的观点是属性拦截破坏了
  封装。面向对象的概念是对象自己处理工作，其他对象只能通过方法调用的得到的
  结果。
3.1 AOP介绍
3.1.2 SpringAOP实现(续)
   spring的运行时通知对象 
   spring在运行期创建代理,不需要特殊的编译器.
      spring有两种代理方式：
      1.若目标对象实现了若干接口，spring使用JDK的
         java.lang.reflect.Proxy类代理。该类让spring动态产生
         一个新类，它实现了所需的接口，织入了通知，并且代理对
         目标对象的所有请求。
      2.若目标对象没有实现任何接口，spring使用
         CGLIB库生成目标对象的子类。使用该方式时需要注意:
          1.对接口创建代理优于对类创建代理，因为会产生更加松耦合的系统。
             对类代理是让遗留系统或无法实现接口的第三方类库同样可以得到通知，
            这种方式应该是备用方案。
          2.标记为final的方法不能够被通知。spring是为目标类产生子类。任何需要
             被通知的方法都被复写，将通知织入。final方法是不允许重写的。
  spring实现了aop联盟接口。
  spring只支持方法连接点：不提供属性接入点，spring的观点是属性拦截破坏了
  封装。面向对象的概念是对象自己处理工作，其他对象只能通过方法调用的得到的
  结果。



