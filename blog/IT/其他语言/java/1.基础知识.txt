
Apache Commons IO是Apache基金会创建并维护的Java函数库。它提供了许多类使得开发者的常见任务变得简单，同时减少重复（boiler-plate）代码，这些代码可能遍布于每个独立的项目中，你却不得不重复的编写。这些类由经验丰富的开发者维护，对各种问题的边界条件考虑周到，并持续修复相关bug。 
包含这些东东      工具类    输入    输出     过滤器     比较器       文件监控器
-------------------------------
1 工具常用的快捷键
  1) Eclipse和MyEclipse，IBM，2001，Java编写，开源，跨平台跨语言
  2）Alt+/快速内容提示
  3）Ctrl+1快速修补错误
  4）Syso+Alt+/快速显示System.out.println()语句 
  5）Ctrl+Shift+F快速排版正确代码
  6）Ctrl+Shift+X转大写，Ctrl+Shift+Y转小写
  7）Ctrl+Shift+O一次性导入多个包
  8）Ctrl+/加或减单行注释
  9) Ctrl+Shift+/加多行注释，Ctrl+Shift+\取消多行注释
 10) 选中行+Alt+上下光标键移动行
 11) crtl + alt +  下   复制当前行
 12) ctrl+d 删除当前行


2 使用断点调试程序，使用Junit测试程序
  2)Step over查看代码粗粒度执行过程
  3)Step into查看代码细粒度执行过程
  4)@Before和@After会在@Test方法执行前后各执行一次
  5)@BeforeClass和@AfterClass是在类前后各执行一次
  ========== 使用 Junit 运行程序 ================
public   class  Demo3 {
     @BeforeClass
     public   static   void  setUpBeforeClass()  throws  Exception {
        System. out .println( "setUpBeforeClass()" );
    }
     @Test
     public   void  test1(){
        System. out .println( "test1()" );
    }
     @Test
     public   void  test2(){
        System. out .println( "test2()" );
    }
     @AfterClass
     public   static   void  tearDownAfterClass()  throws  Exception {
        System. out .println( "tearDownAfterClass()" );
    }
}
------------------------------ 
*3 静态导入和自动装拆箱
  1）静态导入可以导入对象，属性，方法，*
  2）语法：
import static java.lang.Math.PI;
import static java.lang.Math.pow;
import static java.lang.System.out;

==============静态导入==============
package   cn.itcast.java.statik ;          //这样做也不甚美，有点像面向过程的样子
import  org.junit.Test;
import   static  java.lang.Math. PI ;
import   static  java.lang.Math. pow ;
import   static  java.lang.System. out ;
//静态导入
public   class   Demo1  {
     @Test
     public   void  test(){
         double   R  = 2.3;
         out .println( "圆的面积:"  +  PI  *  pow ( R ,2));
    } }   

-----------------------------------
  3）在JDK5中，编译器自动将基本类型和对应的包装类型，自动转换  
例如：int<->Integer
=========== 自动装拆箱 =============
public   class  Demo1 {
     @Test
     public   void  test2(){
         int   i  = 100;
         List   list  =  new   ArrayList ();
         list .add( i ) ;
         int   num  =  ( int ) list .get(0);
        System. out .println( "num=" + num );
    } }   
------------------------------------
*4   增强for循环只能用在 数组 、或 实现Iterator接口 的集合类上


  1)循环迭代   数组 /List/Set/Map集合
  2)对Map集合的二种迭代方式：
a)keySet()
b)entrySet()

==================
//增强for循环
public   class  Demo1 {
     @Test
     public   void  test2(){
         int []  is  = {1,2,3,4,5};
         for ( int   value  :  is ){
            System. out .print( value + "\t" );
        }
    }
     @Test
     public   void  testSet(){
        Set<Integer>  set  =  new  HashSet<Integer>();
         set .add(100);
         set .add(200);
         set .add(300);
        Iterator<Integer>  it  =  set.iterator();
         while ( it .hasNext()){
            Integer  key  =  it .next();
            System. out .print( key + "\t" );
        }
    }
     @Test
     public   void  testList(){
        List<String>  list  =  new  ArrayList<String>();
         list .add( "jack" );
         list .add( "marry" );
         list .add( "sisi" );
         for (String  name  :  list ){
            System. out .print( name + "\t" );
        }
    }
     @Test
     public   void  testMap1(){
        Map<Integer,String>  map  =  new  HashMap<Integer,String>();
         map .put(100, "jack" );
         map .put(200, "marry" );
         map .put(300, "sisi" );
        Set<Integer>  set  =  map . keySet() ;
        Iterator<Integer>  it  =  set .iterator();
         while ( it .hasNext()){
            
            Integer  key  =  it .next();
            String  value  =  map . get(key);
            System. out .println( key + "-" + value );
        }
    }
     @Test
     public   void  testMap2(){
        Map<Integer,String>  map  =  new  HashMap<Integer,String>();
         map .put(100, "jack" );
         map .put(200, "marry" );
         map .put(300, "sisi" );
        Set<Entry<Integer,String>>  set  =  map . entrySet() ;
        Iterator<Entry<Integer,String>>  it  =  set .iterator();
         while ( it .hasNext()){
            Entry<Integer,String>  entry  =  it .next();
            Integer  key  =  entry . getKey();
            String  value  =  entry . getValue();
            System. out .println( key + "<->" + value );
        }
    } }  
=======================

  3)在迭代集合时，一定要动态通知Iterator，而不要动态通知List集合，应选用 ListIterator。


//迭代集合注意的细节
public   class  Demo2 {
     public   static   void  main(String[]  args ) {
        List<String>  list  =  new  ArrayList<String>();
         list .add( "jack" );
         list .add( "marry" );
         list .add( "sisi" );
        System. out .println( "list前长度" + list .size());
         //Iterator<String> it = list.iterator();
        ListIterator<String>  it  =  list . listIterator ();
         while ( it .hasNext()){
            String  key  =  it .next();
            System. out .print( key + "\t" );
             //动态通知迭代器，加入了新元素，从而迭代器自动通知List集合
             it.add("qq");
        }
        System. out .println( "\nlist后长度" + list .size());
         it  =  list .listIterator();
         while ( it .hasNext()){
            String  key  =  it .next();
            System. out .print( key + "\t" );
        }
    }
}
-------------------------------
*5 可变参数
  1）参数的个数不确定的
  2）可变参数只能放置在参数的最后，即 最右边
  3）可变参数最少0个， 最多1个
  4）编译器将可变参数当作一个 一维数组 来对待
========= //可变参数 ==============还没传个数组方便呢
public   class  Demo1 {
     public   static   void  main(String[]  args ) {
         //show1(new String[]{"jack","marry"," sisi "," soso "});
         //show2("jack","marry"," sisi "," soso ","berry");
         show3 ( "qq" , "jack" , "marry" , "sisi" , "soso" , "berry" );
        
    }
     public   static   void  show1(String[]  arr ) {
         for (String  a  : arr ){
            System. out .print( a + "\t" );
        }
    }
     public   static   void  show2(String...  arr ) {
         for (String  a  : arr ){
            System. out .print( a + "\t" );
        }
    }
     public   static   void  show3(String  qq ,String...  arr ) {
        System. out .println( "第一个参数是："  +  qq );
         for (String  a  : arr ){
            System. out .print( a + "\t" );
        }
    }
}  
-----------------------------
*6 枚举‘

在声明枚举类时，也可以声明属性、方法和构造函数，但枚举类的构造函数必须为私有的（这点不难理解）。


  1）当取值是某范围中的之一，这时可以使用枚举
  2）当向用户提示严重的错误时，尽可以使用 抛异常的方式通知客户端
  3）可以对枚举在运行时验证 
  4）可以对枚举在 编译时验证
  5）枚举值相当于实例变量 
  6）枚举类与普通一致，可以继承或实现，如果有抽像方法的话，可以利用每个枚举值以 匿名内部类的方式 去实现
  7）枚举值可以用在 switch() 语句中
  8）枚举类常用方法如下：
a)name( )：显示枚举值
b) ordinal( ) ：显示枚举值对应的索引，从0开始
c)values( )：取得该枚举类对应的所有枚举值，是一个数组
d)valueOf( )：判段某个字符串是否属性枚举值之一
=========================
//分数枚举类
public   enum  Grade {
     A ( "A" , "90-100" ),
     B ( "B" , "80-89" ),
     C ( "C" , "70-79" ),
     D ( "D" , "60-69" ),
     E ( "E" , "<60" );
     private  String  tip ;
     private  String  desc ;
     private   Grade (String  tip ,String  desc ){
         this . tip  =  tip ;
         this . desc  =  desc ;
    }
     public  String getTip() {
         return   tip ;
    }
     public  String getDesc() {
         return   desc ;
    } }  
------------------------------
//学生
public   class  Student {    
     //姓名
     private  String  name ;     
     //分数类
     private  Grade  grade ;    
     public  Student(){}
     public  String getName() {
         return   name ;
    }
     public   void  setName(String  name ) {
         this . name  =  name ;
    }
     public  Grade getGrade() {
         return   grade ;
    }
     public   void  setGrade(Grade  grade ) {
         this . grade  =  grade ;
    }    
}  

-------------------------------
public   class  Demo1 {
     public   static   void  main(String[]  args )  throws  Exception {
        Student  student  =  new  Student();
         student .setName( "marry" );
         student .setGrade(Grade. B );
        System. out .println( "姓名："  +  student .getName());
        System. out .println( "等级："  +  student .getGrade().getTip());
        System. out .println( "分数区间："  +  student.getGrade().getDesc() );
    } }  
==========带抽象方法的枚举===================
//季节枚举类
public   enum  Season{
     SPRING {
         public   void  show(){
            System. out .println( "春天" );
        }
    }, SUMMER {
         public   void  show(){
            System. out .println( "夏天" );
        }
    }, AUTOMN {
         public   void  show(){
            System. out .println( "秋天" );
        }
    }, WINNTER {
         public   void  show(){
            System. out .println( "冬天" );
        }
    };
     //抽像方法
     public   abstract   void  show();
}  

------------------
Season  season  = Season. SPRING ;  
season.show();


        String  msg  = null;
        switch(season){
            case SPRING:
                 msg  = "1";break;    
            case SUMMER:
                 msg  = "2";break;    
            case AUTOMN:
                 msg  = "3";break;    
            case WINNTER:
                 msg  = "4";break;             }   
-------------------------------------
*7 反射
  1)解析一个类的各个部分，形成一个对象。
  // 类名 .class
Class c1 = String.class ;
// 对象 .getClass()
Class c2 = new String().getClass() ;
//Class.forName()
Class c3 = Class.forName(" java.lang.String ") ;

if(c2==c3){
System.out.println("c2==c3");   //c1 c2 c3都相等
}else{
System.out.println("c2!=c3");
}
  2)外存中的类， 加载到内存中 ，会形成该对象的 Class 类，例如：String类，加载到内存中，就是 StringClass 对象。
  3)使用不同的方式，取得同一个类型的字节码对象Class是相同的。(很智能呀）
  4)通过getXxxxx()只能取得该类public的类型
    通过get Declared Xxxxxx()可以取得该类非public的类型
    设置非public类型的可访问性，默认为false，不可访问
c. setAccessible (true); 
  5)反射可以反射private/public的构造方法，字段，普通方法
  6)在反射main方法时，编译器会将数组自动拆分，取第一个值
    解决方案：
//m.invoke(null,(Object)new String[]{"A","B","C","D"});，将数组当作对象，此时编译器不进行拆分
m.invoke(null,new Object[]{new String[]{"A1","B1","C1","D1"}});在数组中嵌入另一个数组

================反射================
           //取得Person类对应的字节码对象Class

         Class   clazz  = Class. forName ( "cn.itcast.java.reflect.Person" );
        
         //取得该类的唯一构造方法
         //Constructor c  = clazz.getConstructor(null);
         //Constructor c = clazz.getConstructor( String.class,int.class );
         Constructor   c  =  clazz .getDeclaredConstructor( null ) ;  非public时用
        
         //创建实例
         //Person p = (Person) c. newInstance (null);
         //Person p = (Person) c.newInstance("berry",10);
        
         //设置非public成员的访问性，默认false即不可访问性
         c .setAccessible( true );        
        Person  p  = (Person)  c .newInstance( null ) ;       
         //执行方法          p .show();
------------------------------
        Person  p  =  new  Person();
         Class   c  = Class. forName ( "cn.itcast.java.reflect.Person" );
        Field  f  =  c .getDeclaredField( "name" );
         f . setAccessible ( true );
         f .set( p , "杰克" ); //p.setName("杰克")         System. out .println( "用户名："  +  p .getName());   

-------------------------
         Class   c  = Class. forName ( "cn.itcast.java.reflect.Person" );
         Constructor   con  =  c .getConstructor( null ) ;
        Person  p  = (Person)  con . newInstance ( null ) ;
        Method  m  =  c .getDeclaredMethod( "goodbye" , null ) ;
         m .setAccessible( true );
        String  returnValue  = (String)  m .invoke( p , null ) ;         System. out .println( returnValue );   
-------------------main方法反射-------------------------------------
         Class   c  = Class. forName ( "cn.itcast.java.reflect.Person" );
         //获取main方法
        Method  m  =  c .getMethod( "main" ,String[]. class ) ;
         //m.invoke(null,(Object)new String[]{"A","B","C","D"});          m .invoke( null , new  Object[]{ new  String[]{ "A1" , "B1" , "C1" , "D1" }});   
-------------------------
         //加载属性文件，取得类名的方法名
        Properties  props  =  new  Properties();
        InputStream  is  =  new  FileInputStream( "src/cn/itcast/java/reflect/class.properties" );
         props .load( is );
        String  className  =  props .getProperty( "className" ).trim();
        String  methodName  =  props .getProperty( "methodName" ).trim();
        
         //通过反射，执行该类的方法
         Class   c  = Class. forName ( className );
         Constructor   con  =  c .getConstructor( null ) ;
        Method  m  =  c .getDeclaredMethod( methodName , null ) ;
         m .setAccessible( true );           m .invoke( con .newInstance( null ), null ) ;   
 ================= JavaBean ===========================

 1 什么是JavaBean？有何特征？        方便的进行读取和设置
   1） 符合特定规则的类
   2）JavaBean分二类：
a）侠义的JavaBean
.私有的字段(Field）
.对私有字段提供存取方法(读写方法）
b）广义的JavaBean
.私有的字段(Field）
.对私有字段提供存取方法(读写方法）
.数量任意的业务方法


 2 内省API（SUN公司开发）----------------->站在反射角度
   1)在操作JavaBean时，即对JavaBean进入setter和getter操作时
   2）属性和getXxxxx()有关，同时必须有返回值
   3）任何一个JavaBean都有一个class属性，来自于Object类。 
==================== 内省API ===================
访问JavaBean属性的两种方式：
直接调用bean的setXXX或getXXX方法。
通过 内省技术访问 (java.beans包提供了内省的API)，内省技术访问也提供了两种方式。
1.通过PropertyDescriptor类操作Bean的属性


2.通过Introspector类获得Bean对象的 BeanInfo，然后通过 BeanInfo 来获取属性的描述器（ PropertyDescriptor ），通过这个属性描述器就可以获取某个属性对应的 getter/setter 方法，然后通过反射机制来调用这些方法。
public   class  Demo1  extends  Object{
     @Test
     public   void  test1()  throws  Exception{
        Student  s  =  new  Student();
         // pd 引用Student的name属性
        PropertyDescriptor  pd  =  new  PropertyDescriptor ( "name" ,Student. class );
         //m = setName()
        Method  m  =  pd .getWriteMethod();
         //s.setName("berry")
         m .invoke( s , "berry" );


         //s.getName()
         m  =  pd .getReadMethod();
        String  returnValue  = (String)  m.invoke ( s , null ) ;
        System. out .println( "returnValue=" + returnValue );
    }
     @Test
     public   void  test2()  throws  Exception{
         //BeanInfo表示该Student对象所有的属性情况
        BeanInfo  bi  = Introspector. getBeanInfo (Student. class );
         //取得Student对象所有属性集合
        PropertyDescriptor[]  pds  =  bi . getPropertyDescriptors ();
         for (PropertyDescriptor  pd  :  pds ){
            System. out .println( pd .getName());    
        }
    }
}
============== = =================  
*3 BeanUtils 框架/工具（APACHE开源组织开发）
需要导入jar包
/src/lib/commons-beanutils-1.8.0.jar
/src/lib/commons-logging.jar
   1）BeanUtils框架能够完成内省的一切功能，而且优化
   2）BeanUtils框架能够对 String<->基本类型自动转化
   3）BeanUtils框架自定义转换器：
ConvertUtils.register ( .，目标对象的Class)
   4)向BeanUtils框架注册自定义转换器必须放在 bu.setProperty() 代码之前    
   5)使用BeanUtils内置String->Date的转换器：
ConvertUtils.register( new DateLocaleConverter(),java.util.Date.class );
============BeanUtils框架/工具（APACHE开源组织开发）==================== 
public   class  Demo1 {
     @Test
     public   void  test1()  throws  Exception{
        Student  s  =  new  Student();
        BeanUtils  bu  =  new   BeanUtils ();    
        //向BeanUtils框架注册自定义的转换器（String->java.util.Date)
        ConvertUtils.register(new Converter(){
            public Object convert(Class  clazz , Object type) {
                //参数一：java.util.Date.class(目标类型）
                //参数二：是传入的参数类型，即java.lang.String
                String strBirthday = (String) type;
                SimpleDateFormat  sdf  = new SimpleDateFormat(" yyyy -MM- dd ");
                try {
                    return sdf.parse(strBirthday);
                } catch (ParseException e) {
                    e.printStackTrace();
                    return null;
                }
            }
        },java.util.Date.class);
        
        ConvertUtils. register ( new  DateLocaleConverter(),java.util.Date. class );
        
         bu . setProperty ( s , "name" , "张三" ) ;
         bu . setProperty ( s , "age" , "31" ) ;
         bu . setProperty ( s , "birthday" , "2011-10-09" ) ;
               
        String  name  =  bu . getProperty ( s , "name" ) ;
        String  age  =  bu . getProperty ( s , "age" ) ;
        String  birthday  =  bu . getProperty ( s , "birthday" ) ;
                
        System. out .println( "name=" + name );
        System. out .println( "age=" + age );
        System. out .println( "birthday=" + new   Date( birthday ) . toLocaleString() );
    }
}  
------------------------------------------------------------
*4 泛型
JDK5中的泛形允许程序员在编写集合代码时，就限制集合的处理类型，从而把原来程序运行时可能发生问题，转变为编译时的问题，以此提高程序的可读性和稳定性(尤其在大型程序中更为突出)。
注意：泛型是提供给 javac编译器 使用的，它用于限定集合的输入类型，让编译器在源代码级别上，即挡住向集合中插入非法数据。但编译器编译完带有泛形的java程序后，生成的class文件中将不再带有泛形信息，以此使程序运行效率不受到影响，这个过程称之为“ 擦除 ”。


   1)在编译时，由 编译器约束放入集合中的类型
   2）在运行时，编译器会擦除原泛型类型
   3）泛型二边要么都不使用约束，要么二边约束一致类型，同时二边必须使用引用类型
   4）为了与JDK1.4兼容，泛型可以一边有约束，一边无约束
   5）当一个类中出大量的 泛型方式或属性/字段 ，此时可以将该类作成泛型类
   6）如果使用泛型通配符，只能获取与泛型具体类型无关的信息，例如：长度。
   7）有二个类，初学者一定要注意： Collections和Arrays



Java程序中的普通方法、构造方法和静态方法中都可以使用泛型。方法使用泛形前， 必须对泛形进行声明 ，语法：<T> ，T可以是任意字母，但通常必须要大写。<T>通常需放在方法的返回值声明之前。例如：
public static <T> void doxx(T t);


 ====================================
  //文件复制
public   class  Demo1 {
     public   static   void  main(String[]  args )  throws  Exception {
        InputStream  is  =  new  FileInputStream( "d:\\c2.jpg" );
        OutputStream  os  =  new  FileOutputStream( "d:\\复件c2.jpg" );
         byte []  buf  =  new   byte [1024];
         int   len  = 0;
         while (( len = is .read( buf ))>0){
             os .write( buf ,0, len );
        }
         is .close();
         os .close();
    } }
===============泛型===================
public   class  Demo1 {
     public   static   void  main(String[]  args ) {     <>念着typeof
        List<Boolean>  list  =  new  ArrayList<Boolean>();
         list .add( true );
         list .add( false );
         for (Boolean  b  :  list ){
            System. out .println( b );
        }     
         /*
         int  stringNum = 0,integerNum=0,booleanNum = 0;
        List list = new ArrayList();
        list.add("jack");
        list.add("marry");
        list.add(" sisi ");
        list.add(100);
        list.add(200);
        list.add(true);
        Iterator it = list.iterator();
        while(it.hasNext()){
            Object  obj  = it.next();
            if( obj   instanceof  String){
                stringNum++;
            }else if( obj   instanceof  Integer){
                integerNum++;
            }else if( obj   instanceof  Boolean){
                booleanNum++;
            }
        }
        System.out.println("stringNum="+stringNum);
         System .out.println("integerNum="+integerNum);
        System.out.println("booleanNum="+booleanNum);
        */
    } }  
------------------------------
public   class  Demo3 {
     public   static   void  main(String[]  args ) {
        Boolean  numA  =  false ;
        Boolean  numB  =  true ;
        System. out .println( "numA"  +  numA );
        System. out .println( "numB"  +  numB );
         swap ( numA , numB );
    }
     //泛型方法
     public   static  <T>  void  swap(T  numA ,T  numB ) {
         T   temp  =  numA ;
         numA  =  numB ;
         numB  =  temp ;
        System. out .println( "numA"  +  numA );
        System. out .println( "numB"  +  numB );
    }
}  

----------------------------
//泛型 通配符? 号的使用

  void print (Collection<?> c)  {　　　//Collection<?>(发音为:"collection of unknown") 
for (Object e : c) {
System.out.println(e);
     }
}

此种形式下需要注意的是：由于print方法c参数的类型为Collection<?>，即表示一种不确定的类型，因此在方法体内不能调用 与类型相关的方法 ，例如add()方法。
总结：使用?通配符主要用于引用对象，使用了?通配符，就只能调对象与类型无关的方法，不能调用对象与类型有关的方法。


public   class  Demo5 {
     public   static   void  main(String[]  args ) {
        List<Boolean>  booleanList  =  new  ArrayList<Boolean>();
         booleanList .add( true );
         booleanList .add( false );
         show ( booleanList );
    }
     public   static   void  show(List<?>  list ) {
        System. out .println( "集合长度为："  +  list .size());
         for (Object  o  :  list ){
            System. out .println( o );
        }
    } }   

---------------------------------
public   class  Apple<T> {     //泛型类
     /*
    public void buy(Integer  num ){
        System.out.println("苹果：" +  num   + "个");
    }
    public void buy(Double price){
        System.out.println("苹果：" + price  + "元");
    }
    */
     //泛型方式
     public   void  buy(T  t ){
        System. out .println( "苹果："  +  t   +  "信息" );
    } }   

限定通配符 的上边界：
正确：Vector<? extends Number> x = new Vector<Integer>();
错误：Vector<? extends Number> x = new Vector<String>();
 
限定通配符的下边界
正确：Vector<? super Integer> x = new Vector<Number>();
错误：Vector<? super Integer> x = new Vector<Byte>();   