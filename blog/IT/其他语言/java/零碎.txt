【json转换】
Gson的应用主要为toJson与fromJson两个转换函数，而在使用这种对象转换之前需
先创建好对象的类以及其成员才能成功的将JSON字符串成功转换成相对应的对象。


  class Examples {
    private int answer1 = 100;
    private String answer2 = "Hello world!";
    Examples(){
    }     // default constructor
  }
序列化JAVA对象成JSON字符串


   Examples example1 = new Examples();
   Gson gson = new Gson();
   String json = gson.toJson(example1);
==> json is {"answer1":100,"answer2":"Hello world!"}


反序列化JSON字符串成对应的JAVA对象


Examples example2= gson.fromJson(json,Examples.class);
==> example2即與example1相同  
  
【对象序列化】  
public class Account implements Serializable {  
通常，在构建域对象时，需要考虑该对象可能需要进行网络传输，
本地缓存，因此建议实现序列化接口Serializable   
【类型转换】
long--->int
long ll = 300000;  
int ii= new Long(ll).intValue();  
三、先把long转换成字符串String，然后在转行成Integer


long ll = 300000;  
int ii = Integer.parseInt(String.valueOf(ll)); 


 
