
u  Memcached的基本概念(初步认识)

u  Memcached是一个高性能的分布式的内存对象缓存系统，目前全世界不少人使用这个缓存项目来构建自己大负载的网站，来分担数据库的压力，通过在内存里维护一个统一的巨大的hash表，它能够用来存储各种格式的数据，包括图像、视频、文件以及数据库检索的结果等。简单的说就是将数据调用到内存中，然后从内存中读取，从而大大提高读取速度。

 

是一种缓存技术(内存), 你可以把它想象成一张巨大的内存表:形式[他就是一个服务]

key                    val 

key值(字符串)         可以放(字符串【二进制数据[视频、音频、图片]】,数值,数组,对象,)

 

 

从访问速度 

内存>文件>数据库

 

 

 

一个实际的问题分析:

 

 

待讲的实际运用案例!

 

 

快速入门

u  安装我们的memcache服务

步骤

1.  下载

2.  安装

将memcached软件拷贝到某个目录,最好放在php开发环境目录下,便于管理

安装需要先进入到cmd下，切换到memcache软件所在文件夹下，然后使用命令 【memcached –d install】完成安装.

安装成功后，memcached 将成为一个服务存在. 

* 启动 memcached -d start

* 查看 memcached 可使用命令： memcached -h

卸载 memcached.exe  – d uninstall   (-d  daemon 后台程序)

停止服务 memcahced.exe  – d stop 

 

netstat  – an   看看是否有 11211 端口在监听，如果在监听，则说明成.

netstat  – anb  (b 可以显示 是哪个程序在监听这个端口.)

如果现在，我要杀掉这个程序 ,在windows 下  可以使用任务管理器杀死.

linux  kill -9 进程号         killall 进程名 

 

大部分同学安装Ok, 只有是xp都ok,

win7 的同学有一部分没有ok

a.  把 memcached.exe 放在 中文目录 , 这样不行

b.  安装使用的是 普通用户， 你要切换成 administror   ctrl+alt+delete

 

linux下面安装的步骤如下:

基于libevent事件(需要先安装livevent )

Linux下

安装libevent时

./configure –prefix=/usr

Make && make install

安装memcached

./configure –with-libevent=/usr

Make && make install

   启动Memcahced –d –m 128 –l 192.168.1.111 –p 11211 –u root [表示128m, 监听192.168.1.111 端口11211]

 

    停止: kill `cat /tmp/memcached.pid`;

Killall  memcached

 

 

如何操作我们的memcached 服务.

 

 

学习如何完成crud操作! (任务驱动 |  )

 

telnet 的具体使用

 

a.  登录到telnet 

语法 

telnet ip 端口 

 

登录到  11211 端口 

telnet 127.0.0.1 11211 

 

b 如何对mem进行 curd 操作

 

添加

add key1  0  60  5  hello

 

说明  key1 表示 键值 ，可以自己指定

0  表示一个格式， 不变

60  存放在mem多长时间

5  表示存放的数据是多少个字节

 

查询

get 键值

举例

get hsp1 

说明如果 hsp1 不存在，或是是因为时间到而被 memcache 删除了，将得到空.

 

修改

有两种方法

 

replace 键值  0 时间 大小  【这里有一个注意事项，该键值必须存在】

举例:

replace hsp1 0 40 8

 

第二种方法:

set 键值 0 时间 大小 【如果这个键存在，则替换，如果不存在，则表示添加一个新的键值】

 

案例

set hsp1 0 60 5 

 

删除 

 

语法

delete 键值


现在，如果我们在mem服务中，需要做一个计数器(存放值一定是一个数)，怎么办?

 

key          val

counter        0

add counter 0 0 100

incr key 数字

 

telnet使用ok!

 

u  如何使用memcache 的扩展来 操作我们的memcached  服务 

(1)  把  php_memcache.dll   拷贝 ~php/ext/目录

(2)  在 php.ini 中添加一句话

;引入php_memcache.dll

extension=php_memcache.dll

(3)  使用 PHP 程序 curd

<?php

 

//创建对象

$mem=new Memcache;

//连接到mem服务器

$mem->connect("127.0.0.1",11211);

//添加,该函数返回true

 

if($mem->add("hsp1","china",MEMCACHE_COMPRESSED,60)){



echo "添加ok";

}else{

echo "添加err";

}

 

//查询

 

$val=$mem->get("hsp1");

echo "val=$val";

echo "<br/>";

//修改 replace  set

if($mem->replace("hsp1","hello,world",MEMCACHE_COMPRESSED,60)){

echo "replace ok";

}else{

echo "replace 失败";

}

echo "<br/>";

//set 如果存在就替换，不存在，就添加

if($mem->set("hsp1","hello,world , 你好!",MEMCACHE_COMPRESSED,60)){

echo "set ok";

}else{

echo "set 失败";

}

 

echo "<br/>";

//删除

if($mem->delete("hsp1")){

echo "删除ok";



}

 

(4)  谈谈细节,加强

讨论, 在memcache中什么数据类型可以放入. 字符串 ，数字 ，数组, 对象 ,资源

 

 

当我们在mem中存取对象是，在取的时候，我们需要在前面 引入这个类的声明.

 

把这个代码:

<?php

 

//放入数组

$arr=array("1"=>"beijing","2"=>"天津");

//数组默认是序列 化

if($mem->add("city2",json_encode($arr),MEMCACHE_COMPRESSED,60)){

echo "city ok";

}else{

echo "city fail";

}



 

//对象

class Dog{

public $age;

public $color;

public function __construct($age,$color){

$this->age=$age;

$this->color=$color;

}

}

 

$dog1=new Dog(30,"红色");

 

if($mem->add("dog1",$dog1,MEMCACHE_COMPRESSED,60)){

echo "dog1 ok";

}else{

echo "dog1 fail";

}

echo "<br/>";

$mydog=$mem->get("dog1");

echo $mydog->age;

var_dump($mydog);

 

$con=mysql_connect("localhost","root","root");

echo "<br/>";

if($con){

//放入mem

if($mem->add("conn",$con,MEMCACHE_COMPRESSED,160)){

echo "资源添加ok";



}else{

echo "资源添加失败";

}

}

 

 

 

请大家思考一个问题!

工作环境: apache 的 httpd.conf 文件 php.ini 文件是有其他人来管理,你没有权利去修改这些配置文件,但是你还希望去使用memcached 

 

解决方法: 我们使用原生态的代码来完成.->这里我们可以直接使用 

我们可以把 memcached-clinet.php 引入到我们的项目中，然后我就可以直接来完成了.

 

代码: 完成 crud操作.

①  先关闭 extension

②  我们写mem4.php 并引入我们的 memcached-clinet.php 一般说所有的技术文档，都会给你一个案例，所以你照这个案例可以快速使用

<?php

 

//直接使用函数来操作我们的memcached

 

include "memcached-client.php";

 

 $mc = new memcached(

array(

              'servers' => array('127.0.0.1:11211'),

               'debug'   => false,

               'compress_threshold' => 10240,

               'persistant' => true));

//添加 【这里仍然支持添加 数组,对象,数值 】

   if($mc->set('hsp1', "你好!北京!",60)){

echo "ok";

   }else{

   echo "fail!";

   }

   //获取

   $val=$mc->get("hsp1");

   echo "<br/>"."val=$val";

 

   //修改 直接使用set函数，就是 replace

   if($mc->replace("hsp1","北京",30)){

   echo "<br/>修改成功!";

   }else{

  echo "<br/>修改fail!";

   }



 

 

 //获取

   $val=$mc->get("hsp1");

 //  echo "<br/>"."修改后 val=$val";



if(is_array($val)){



echo "<pre>";

print_r($val);

echo "</pre>";

}else if(is_float($val)){

 

echo "<br/>"."修改后 val=$val";



}else if(is_string($val)){

 

echo "<br/>"."修改后 val=$val";



}

 

   //删除

 

/*  if($mc->delete("hsp1")){

   echo "<br/>删除成功!";

   }else{

  echo "<br/>删除fail!";

   }*/

 

u  关于memcache的机制

1.  是基于 c/s 2. 底层的协议是  普通文本

2.  是基于 libevent机制处理

3.  memcache的数据是放在内存

4.  memcache本身支持 LRU 算法      

[ 算法/网络/数据库/操作系统+编译原理 

5.  基于客户端分布式.示意图

 

 

u  memcache细节

1.  生命周期

数据的生命周期是指定的,只有把数据放入就开始计时,只要时间到，就销毁.

session(1440s)  如果你没有关闭浏览器,并且没有使用session 1440后销毁

1439使用一次这个sesion ，又开始重新计时.

2.  如何把session 放入memcache服务器

sesion 垃圾回收的概率是  session.gc_probability /  session.gc_divisor  

步骤

(1)  因为session 默认是放在文件中, windows下 c:/windows/Temp

(2)  重新配置php.ini 把关于session配置修

session.save_handler = memcache

; 修改路径

session.save_path = "tcp://127.0.0.1:11211"

 

(3)  如果我们不去修改php.ini 也达到这样的效果

可以使用 ini_set 函数来玩

 

代码:

 

<?php

 

  ini_set("session.save_handler","memcache");

  ini_set("session.save_path","tcp://127.0.0.1:11211");

  session_start();

  $_SESSION['name']="shunping";

 

  echo "<br/>存放sesionok";

  echo "<br/>session_id=".session_id();

  //取出

  $val=$_SESSION['name'];

  echo "<br/>session name=".$val;

 

(4)  memcache是无用户状态，也就是说，是所有用户共享的数据

(5)  安全性.

windows. 下我们使用防火墙  同时 打开 80端口. , 只让我们自己 php程序去操作我们的memached服务。这样我们的memcache就安全，

linux下 iptables -a input -p tcp -s 127.0.0.1  – dport 11211 -j ACCEPT

 

总结:

-- 我自己的一个小结如何决定是否使用 memcached

-- 如果是一个小网站， pv (page view)值不大，就不考虑使用 memcache 了

-- 变化频繁，查询频繁，但是不一定写入数据库 ( 适合 memcache)

-- 变化频繁 ,  一变化就要入库 [ 比如股票，金融 .]( 不适合 memcache)

 

 

u  memcache 和 session 对比

1.  memcache 放入内存，session默认放入文件，但是通过配置，也可以入memcached

2.  生命周期 (memcahce 数据一旦创建就开始时间，到时就销毁  ， session 创建后计时，但是如果在没有成垃圾前，你又使用过一次，则重新计算)

3.  解决的问题不一样 memcache为了提升速度 , session 是用于追踪用户的行为

相关技术  Redis  也是 key/value 一种缓存技术.

 ====================================================



  < ? php

 
    //创建对象
    $mem = new Memcache;
    //连接到mem服务器
    $mem - > connect( "127.0.0.1" , 11211 );
 
 
    //放入数组
    $arr = array ( "1" = > "beijing" , "2" = > "天津" );
    //数组默认是序列化的   取出来的还是数组
    //if($mem->add("city2",json_encode($arr),MEMCACHE_COMPRESSED,60)){
    if ($mem - > set( "city" ,$arr,MEMCACHE_COMPRESSED, 600 )){
        echo "city ok" ;
    } else {
        echo "city fail" ;
    }
    print_r($mem - > get(city));
    exit ();
 
    //对象
    class Dog{
        public $age;
        public $color;
        public function __construct($age,$color){
            $this - > age = $age;
            $this - > color = $color;
        }
    }
 
    $dog1 = new Dog( 30 , "红色" );
 
    if ($mem - > add( "dog1" ,$dog1,MEMCACHE_COMPRESSED, 60 )){
        echo "dog1 ok" ;
    } else {
        echo "dog1 fail" ;
    }
    echo "<br/>" ;
    $mydog = $mem - > get( "dog1" ); //取的时候要有类的声明
    echo $mydog - > age;
    var_dump($mydog);
 
    $con = mysql_connect( "localhost" , "root" , "root" ); //资源不能存放
    echo "<br/>" ;
    if ($con){
        //放入mem
        if ($mem - > add( "conn" ,$con,MEMCACHE_COMPRESSED, 160 )){
            echo "资源添加ok" ;
 
        } else {
            echo "资源添加失败" ;
        }
    }
 
/******************在线好友状态**********************/
< ? php
 
//数据库记录  每个人好友
//批量导入
 
$onlines = array ();
$hao_friend = array (
        "113" = > "1" , "112" = > "0" , "456" = > "2"
);
 
$onlines[ '100' ] = $hao_friend;
 
//添加
//$onlines['100']['345']='4';
 
//更新
$onlines[ '100' ][ '456' ] = '1' ;
 
echo "<pre>" ;
print_r($onlines);
echo "</pre>" ;
== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == =
< ? php
    //实例化memcache类
    $mem = new Memcache;
 
    //连接memcache服务器(参数为服务器IP， 端口)，
    //pconnect--表示持续连接
    $mem - > connect( 'localhost' , 11211 );
 
    //addserver表示增加memcache服务器,
    //多个memcache服务器可以实现分布式缓存
    //$mem->addsever('www.pccxin.com', 11211);
    //$mem->addsever('www.frontu.net', 11211);
 
    //向memcache服务器中增加元素
    //使用 MEMCACHE_COMPRESSED 标记对数据进行压缩(使用zlib),
    // 保存时间（单位秒）
    $mem - > add( 'mystr' , 'This is my first memcache test!' ,
        MEMCACHE_COMPRESSED, 3600 );
 
    //add不会重复添加，要想改变值可用replace()，或者set
    //$mem->add('mystr', 'This is my first memcache test!',
        MEMCACHE_COMPRESSED, 3600 );
 
        //向服务器中保存数据
    $mem - > set( 'mystr' , 'This is my second memcache test!' ,
         MEMCACHE_COMPRESSED, 3600 );
 
    //从服务端删除一个元素
    //$mem->delete('mystr');
 
    //清洗（删除）已经存储的所有的元素
    //$mem->flush();
 
    //获取memcache中的数据
    echo $mem - > get( 'mystr' ). '<br />' ;
 
    //向memcache服务器中增加元素
    $mem - > add( 'myarr' , array ( '1' = > 'aaa' , '2' = > 'bb' , '3' = > 'cc' ),
         MEMCACHE_COMPRESSED, 3600 );
 
    var_dump($mem - > get( 'myarr' ));
    echo '<br />' ;
 
 
    class Person{
        var $name = 'shawnking' ;
        var $sex = '男' ;
    }
 
    //向memcache服务器中增加元素
    $mem - > add( 'myobj' , new Person);
 
    var_dump($mem - > get( 'myobj' ));
    echo '<br />' ;
 
 
    //获取memcache的版本信息
    echo 'Version:' ,$mem - > getVersion();
 
    //得到memcache的参数信息
    echo '<pre>' ;
    print_r($mem - > getStats());
    echo '</pre>' ;
 
    //关闭到memcached服务端的连接。这个函数不会关闭持久化连接，
    // 持久化连接仅仅会在web服务器关机/重启时关闭。与之对应的，你也可以使用
    $mem - > close(); 
 
* * * * * * * * * * * * 数据库的数据转移到memcache * * * * * * * * * * *= == == == == == == == =
< ? php
    //实例化一个memcache对象
    $mem = new Memcache;
 
    //连接memcache服务器
    $mem - > connect( 'localhost' , 11211 );
 
    $sql = 'SELECT * FROM test' ;
    $key = substr(md5($sql), 10 , 8 );
 
    //从memcache服务器获取数据
    $data = $mem - > get($key);
 
 
    //判断memcache是否有数据
    if ( ! $data ){
 
        $mysqli = new mysqli( 'localhost' , 'root' , '123456' , 'testdb' );
 
        $result =   $mysqli - > query($sql);
 
        $data = array ();
 
        while ( $row = $result - > fetch_assoc() ){
            $data[] = $row;
        }
 
        $result - > free(); //释放内存
        $mysqli - > close(); //断开mysql连接
 
        //向memcache服务器存储数据,还要设置失效时间（单位为秒）
        $mem - > set($key, $data, MEMCACHE_COMPRESSED, 3600 );
 
     }
 
     print_r($data);
     $mem - > close(); //关闭memcache连接
== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==    
        将session信息写入到memcache服务器当中
< ? php
 
    /**
     * session保存到memcache类
     */
    class MemSession{
 
        private static $handler = null;
        private static $lifetime = null;
        private static $time = null;
        const NS = 'session_' ;
 
        /**
         * 初始化函数
         */
        private static function init($handler){
            self : : $handler = $handler;
            self : : $lifetime = ini_get( 'session.gc_maxlifetime' );
 
            self : : $time = time();
        }
 
        public static function start(Memcache $memcache){
            self : : init($memcache);
 
            session_set_save_handler(
                array ( __CLASS__ , 'open' );
                array ( __CLASS__ , 'close' );
                array ( __CLASS__ , 'read' );
                array ( __CLASS__ , 'write' );
                array ( __CLASS__ , 'destrory' );
                array ( __CLASS__ , 'gc' );
            );
            session_start();
        }
 
        public static function open($path, $name){
            return true;
        }
 
        public static function close(){
            return true;
        }
 
        public static function read($PHPSESSID){
            $out = self : : $handler - > get(self : : $session_key($PHPSESSID));
 
            if ( $out == = false || $out = null )
                return '' ;
            return $out;
        }
 
        public static function write($PHPSESSID, $data){
            $method = $data ? 'set' : 'replace' ;
            return self : : $handler - > $method(self : : $session_key($PHPSESSID),
                     $data, MEMCACHE_COMPRESSED, self : : $lifetime);
        }
 
        public static function destroy($PHPSESSID){
            return sele : : $handler - > delete(self : : $session_key($PHPSESSID));
        }
 
        public static function gc($lifetime){
            return true;
        }
 
        private static session_key($PHPSESSID){
            $session_key = self : : NS.$PHPSESSID;
            return $session_key;
        }
    }
 
    $memcache = new Memcache;
 
    $memcache - > connect( 'localhost' , 11211 ) or die ( 'could not connect!' );
 
    MemSession : : start($memcache);
 
* * * * * * * * * * * * * * * * memcache的安全（不让别人访问） * * * * * * * * * * * * * * * * *
    1 、内网连接
 
    2 、设置防火墙(关闭再开放）
 
                iptables - A INPUT - p tcp - dport 11211 - j DROP 来拒绝全部的访问，
 
                再设置可以访问的IP
 
                iptables - A INPUT - p tcp - s 192 . 168 . 1 . 111 - dport 11211 - j ACCEPT
 
                iptables - A INPUT - p udp - s 192 . 168 . 1 . 111 - dpost 11211 - j ACCEPT
 
== == == == == = 不加dll文件的情况下 == == == == == == == =
< ? php
    //直接使用函数来操作我们的memcached
    include "memcached-client.php" ;
 
     $mc = new memcached(
                array (
              'servers' = > array ( '127.0.0.1:11211' ),
               'debug'    = > false,
               'compress_threshold' = > 10240 ,
               'persistant' = > true));
    //添加 【这里仍然支持添加 数组,对象,数值 】
   if ($mc - > set( 'hsp1' , "你好!北京!" , 60 )){
    echo "ok" ;
   } else {
   echo "fail!" ;
   }
   //获取
   $val = $mc - > get( "hsp1" );
   echo "<br/>" . "val=$val" ;
 
   //修改 直接使用set函数，就是 replace
   if ($mc - > replace( "hsp1" , "北京" , 30 )){
       echo "<br/>修改成功!" ;
   } else {
      echo "<br/>修改fail!" ;
   }
     //获取
   $val = $mc - > get( "hsp1" );
  echo "<br/>" . "修改后 val=$val" ;
 
    $type = gettype($val);
 
        if (is_array($val)){
 
            echo "<pre>" ;
            print_r($val);
            echo "</pre>" ;
        } else if (is_float($val)){
 
            echo "<br/>" . "修改后 val=$val" ;
 
        } else if (is_string($val)){
 
            echo "<br/>" . "修改后 val=$val" ;
 
        }
 
   //删除
 
  if ($mc - > delete( "hsp1" )){
       echo "<br/>删除成功!" ;
   } else {
      echo "<br/>删除fail!" ;
   }
== == == == == == 不能直接修改服务器配置的情况下session用memcache == == == == == =
< ? php
  ini_set( "session.save_handler" , "memcache" );
  ini_set( "session.save_path" , "tcp://127.0.0.1:11211" );
  session_start();
  $_SESSION[ 'name' ] = "shunping" ;
 
  echo "<br/>存放sesionok" ;
  echo "<br/>session_id=" .session_id();
  //取出
  $val = $_SESSION[ 'name' ];
  echo "<br/>session name=" .$val;
 



 

 ==========================================================

memcached 的基本 命令 ( 安装、卸载、启动、配置相关 ) ：
-p 监听的端口
-l 连接的 IP 地址 , 默认是本机  
-d start 启动 memcached 服务
-d restart 重起 memcached 服务
-d stop|shutdown 关闭正在运行的 memcached 服务
-d install 安装 memcached 服务
-d uninstall 卸载 memcached 服务
-u 以的身份运行 ( 仅在以 root 运行的时候有效 )
-m 最大内存使用，单位 MB 。默认 64MB

-M 内存耗尽时返回错误，而不是删除项
-c 最大同时连接数，默认是 1024  
-f 块大小增长因子，默认是 1.25
-n 最小分配空间， key+value+flags 默认是 48
-h 显示帮助

 

 

 

memcached 的基本 命令 ( 当 memcached 启动后 用于对 memcached 管理的数据和本身运行状态相关的命令 ) ：

 Command

 Description

 Example


 get

 Reads a value

 get mykey


 set

 Set a key unconditionally

 set mykey 0 60 5


 add

 Add a new key

 add newkey 0 60 5


 replace

 Overwrite existing key

 replace key 0 60 5


 append

 Append data to existing key

 append key 0 60 15


 prepend

 Prepend data to existing key

 prepend key 0 60 15


 incr

 Increments numerical key value by given number

 incr mykey 2


 decr

 Decrements numerical key value by given number

 decr mykey 5


 delete

 Deletes an existing key

 delete mykey


 flush_all

 Invalidate specific items immediately

 flush_all


 Invalidate all items in n seconds

 flush_all 900


 stats

 Prints general statistics

 stats


 Prints memory statistics

 stats slabs


 Prints memory statistics

 stats malloc


 Print higher level allocation statistics

 stats items


  

 stats detail


  

 stats sizes


 Resets statistics

 stats reset


 version

 Prints server version.

 version


 verbosity

 Increases log level

 verbosity


 quit

 Terminate telnet session

 quit


 

对查看的信息的关键字中英文对照表

 pid

 memcache服务器的进程ID


 uptime

 服务器已经运行的秒数


 time

 服务器当前的unix时间戳


 version

 memcache版本


 pointer_size

 当前操作系统的指针大小（32位系统一般是32bit）


 rusage_user

 进程的累计用户时间


 rusage_system

 进程的累计系统时间


 curr_items

 服务器当前存储的items数量


 total_items

 从服务器启动以后存储的items总数量


 bytes

 当前服务器存储items占用的字节数


 curr_connections

 当前打开着的连接数


 total_connections

 从服务器启动以后曾经打开过的连接数


 connection_structures

 服务器分配的连接构造数


 cmd_get

 get命令（获取）总请求次数


 cmd_set

 set命令（保存）总请求次数


 get_hits

 总命中次数


 get_misses

 总未命中次数


 evictions

 为获取空闲内存而删除的items数（分配给memcache的空间用满后需要删除旧的items来得到空间分配给新的items）


 bytes_read

 总读取字节数（请求字节数）


 bytes_written

 总发送字节数（结果字节数）


 limit_maxbytes

 分配给memcache的内存大小（字节）


 threads

 当前线程数


 

 

 

 

 